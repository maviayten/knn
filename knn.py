# -*- coding: utf-8 -*-
"""KNN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UA_oIObCMU1rGptC6iCPUBXMODz3VKZ6
"""

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_breast_cancer


# %matplotlib inline
sns.set_style("whitegrid")

data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

df.sample(15)

basit_istatistikler = df.describe()

print(basit_istatistikler)

df['target'].value_counts(
    normalize=True
)

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure(figsize=(20, 40))
fig.suptitle('Tüm Sayısal Sütunların Dağılımı (Histogram)', fontsize=22, y=1.02)

veri_tipleri = df.dtypes

sayisal_sutunlar = veri_tipleri[veri_tipleri != 'object'].index.tolist()

for i, sutun in enumerate(sayisal_sutunlar, 1):
    plt.subplot(11, 3, i)
    sns.histplot(df[sutun], bins=30, kde=True, color='blue')
    plt.title(f'{sutun}', fontsize=16)
    plt.xlabel('')
    plt.ylabel('Frekans', fontsize=12)

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(20, 40))
fig.suptitle('Tüm Sayısal Sütunların Dağılımı (Kutu Grafiği)', fontsize=22, y=1.02)

for i, sutun in enumerate(sayisal_sutunlar, 1):
    plt.subplot(11, 3, i)
    sns.boxplot(data=df[sutun], color='skyblue')
    plt.title(f'{sutun}', fontsize=16)
    plt.xlabel('')
    plt.ylabel('Değer', fontsize=12)

plt.tight_layout()
plt.show()

fig = plt.figure(figsize=(5, 5))
plt.pie(df['target'].value_counts(), labels=['İyi Huylu (Benign)', 'Kötü Huylu (Malignant)'],
        autopct='%1.1f%%', startangle=90, colors=['skyblue', 'salmon'])
plt.title('Hedef Değişkenin Sınıf Dağılımı (Pasta Grafiği)', fontsize=18)
plt.show()

fig = plt.figure(figsize=(4, 3))
sns.countplot(data=df, x='target', palette=['skyblue', 'salmon'])

plt.xticks(ticks=[0, 1], labels=['Kötü Huylu (Malignant)', 'İyi Huylu (Benign)'])
plt.title('Hedef Değişkenin Sınıf Dağılımı (Çubuk Grafiği)', fontsize=18)
plt.xlabel('Sınıf', fontsize=14)
plt.ylabel('Gözlem Sayısı', fontsize=14)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='mean radius', y='mean perimeter', hue='target', palette=['salmon', 'skyblue'])

plt.title('Mean Radius ve Mean Perimeter İlişkisi (Scatter Plot)', fontsize=18)
plt.xlabel('Mean Radius', fontsize=14)
plt.ylabel('Mean Perimeter', fontsize=14)
plt.legend(title='Sınıf', labels=['Kötü Huylu', 'İyi Huylu'])
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='mean area', y='mean smoothness', hue='target', palette=['salmon', 'skyblue'])
plt.title('Mean Area ve Mean Smoothness İlişkisi (Scatter Plot)', fontsize=18)
plt.xlabel('Mean Area', fontsize=14)
plt.ylabel('Mean Smoothness', fontsize=14)
plt.legend(title='Sınıf', labels=['Kötü Huylu', 'İyi Huylu'])
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='mean concavity', y='mean concave points', hue='target', palette=['salmon', 'skyblue'])
plt.title('Mean Concavity ve Mean Concave Points İlişkisi (Scatter Plot)', fontsize=18)
plt.xlabel('Mean Concavity', fontsize=14)
plt.ylabel('Mean Concave Points', fontsize=14)
plt.legend(title='Sınıf', labels=['Kötü Huylu', 'İyi Huylu'])
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='worst radius', y='worst perimeter', hue='target', palette=['salmon', 'skyblue'])
plt.title('Worst Radius ve Worst Perimeter İlişkisi (Scatter Plot)', fontsize=18)
plt.xlabel('Worst Radius', fontsize=14)
plt.ylabel('Worst Perimeter', fontsize=14)
plt.legend(title='Sınıf', labels=['Kötü Huylu', 'İyi Huylu'])
plt.show()

fig = plt.figure(figsize=(10, 20))
fig.suptitle('Tüm Sayısal Sütunların Yoğunluk Dağılımı (Yoğunluk Grafiği)', fontsize=22, y=1.02)


for i, sutun in enumerate(sayisal_sutunlar, 1):
    plt.subplot(11, 3, i)
    sns.kdeplot(df[sutun], shade=True, color='blue')
    plt.title(f'{sutun}', fontsize=16)
    plt.xlabel('')
    plt.ylabel('Yoğunluk', fontsize=12)

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

korelasyon_matrisi = df.corr()

plt.figure(figsize=(22, 18))

sns.heatmap(korelasyon_matrisi, annot=True, cmap='coolwarm', linewidths=0.5, fmt=".2f")

plt.title('Özellikler Arasındaki Korelasyon Matrisi (Isı Haritası)', fontsize=22)

plt.show()

df.corr()

eksik_degerler= df.isnull().sum()
print(eksik_degerler)

def aykiri_deger_sayisi(veri, sutun):
    Q1 = veri[sutun].quantile(0.25)
    Q3 = veri[sutun].quantile(0.75)
    IQR = Q3 - Q1
    alt_sinir = Q1 - 1.5 * IQR
    ust_sinir = Q3 + 1.5 * IQR
    aykiri_degerler = veri[(veri[sutun] < alt_sinir) | (veri[sutun] > ust_sinir)]
    return len(aykiri_degerler)

aykiri_ozet = pd.DataFrame({
    'Sütun': df.columns,
    'Aykırı Değer Sayısı': [aykiri_deger_sayisi(df, sutun) for sutun in df.columns],
    'Aykırı Değer Yüzdesi (%)': [aykiri_deger_sayisi(df, sutun) / len(df) * 100 for sutun in df.columns]
})

aykiri_ozet = aykiri_ozet[aykiri_ozet['Aykırı Değer Sayısı'] > 0].sort_values(by='Aykırı Değer Sayısı', ascending=False)

aykiri_ozet

for sutun in df.columns:
    Q1 = df[sutun].quantile(0.25)
    Q3 = df[sutun].quantile(0.75)
    IQR = Q3 - Q1

    alt_sinir = Q1 - 1.5 * IQR
    ust_sinir = Q3 + 1.5 * IQR

    df[sutun] = np.where(df[sutun] < alt_sinir, alt_sinir, df[sutun])
    df[sutun] = np.where(df[sutun] > ust_sinir, ust_sinir, df[sutun])

ozet_istatistikler_tum = df.describe()

print(ozet_istatistikler_tum)

import numpy as np

carpik_ozellikler = df.skew().sort_values(ascending=True)

yuksek_carpiklik = carpik_ozellikler[carpik_ozellikler > 0.75].index

for sutun in yuksek_carpiklik:
    df[sutun] = np.log1p(df[sutun])

donusum_sonrasi_carpiklik = df[yuksek_carpiklik].skew()

donusum_sonrasi_carpiklik

from sklearn.preprocessing import StandardScaler

X = df.drop(columns='target')
y = df['target']

standartlastirici = StandardScaler()

standart_ozellikler = standartlastirici.fit_transform(X)

X_standart = pd.DataFrame(standart_ozellikler, columns=X.columns)

X_standart.head()

from sklearn.model_selection import train_test_split

X = X_standart
y = y

X_egitim, X_test, y_egitim, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

X_egitim.shape, X_test.shape

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

knn_model = KNeighborsClassifier(n_neighbors=2, weights='uniform', metric='euclidean')

knn_model.fit(X_egitim, y_egitim)

import pandas as pd
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score

y_egitim_tahmin = knn_model.predict(X_egitim)
y_test_tahmin = knn_model.predict(X_test)

egitim_f1 = f1_score(y_egitim, y_egitim_tahmin, pos_label=1)
test_f1 = f1_score(y_test, y_test_tahmin, pos_label=1)

egitim_hassasiyet = precision_score(y_egitim, y_egitim_tahmin, pos_label=1)
test_hassasiyet = precision_score(y_test, y_test_tahmin, pos_label=1)

egitim_duyarlilik = recall_score(y_egitim, y_egitim_tahmin, pos_label=1)
test_duyarlilik = recall_score(y_test, y_test_tahmin, pos_label=1)

egitim_dogruluk = accuracy_score(y_egitim, y_egitim_tahmin)
test_dogruluk = accuracy_score(y_test, y_test_tahmin)

skorlar_df = pd.DataFrame({
    'Skor': ['Doğruluk (Accuracy)', 'Hassasiyet (Precision)', 'Duyarlılık (Recall)', 'F1 Skoru (F1 Score)'],
    'Eğitim Kümesi': [egitim_dogruluk, egitim_hassasiyet, egitim_duyarlilik, egitim_f1],
    'Test Kümesi': [test_dogruluk, test_hassasiyet, test_duyarlilik, test_f1]
})

print(skorlar_df)

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, RocCurveDisplay, confusion_matrix, roc_curve, auc

egitim_karisik_matrisi = confusion_matrix(y_egitim, y_egitim_tahmin)
test_karisik_matrisi = confusion_matrix(y_test, y_test_tahmin)


fig, ax = plt.subplots(1, 2, figsize=(15, 7))

ConfusionMatrixDisplay.from_estimator(knn_model, X_egitim, y_egitim, ax=ax[0], cmap='Blues')
ax[0].set_title('Eğitim Karışıklık Matrisi')

ConfusionMatrixDisplay.from_estimator(knn_model, X_test, y_test, ax=ax[1], cmap='Blues')
ax[1].set_title('Test Karışıklık Matrisi')

plt.tight_layout()
plt.show()

y_test_olasilik = knn_model.predict_proba(X_test)[:, 1]

yanlis_pozitif_orani, dogru_pozitif_orani, esikler = roc_curve(y_test, y_test_olasilik)
roc_auc = auc(yanlis_pozitif_orani, dogru_pozitif_orani)

plt.figure(figsize=(10, 8))
RocCurveDisplay.from_estimator(knn_model, X_test, y_test)
plt.plot([0, 1], [0, 1], 'k--', label='Rastgele Tahmin')
plt.title(f'ROC Eğrisi (AUC = {roc_auc:.2f})')
plt.xlabel('Yanlış Pozitif Oranı (FPR)')
plt.ylabel('Doğru Pozitif Oranı (TPR)')
plt.legend(loc='lower right')
plt.show()

from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
import numpy as np

parametre_ızgarası = {
    'n_neighbors': list(range(5, 31,2)),
    'weights': ['uniform', 'distance'],
    'metric': ['euclidean', 'manhattan']
}

grid_arama = GridSearchCV(
    estimator=KNeighborsClassifier(),
    param_grid=parametre_ızgarası,
    cv=5,
    scoring='accuracy',
    n_jobs=-1,
    refit=True
)

grid_arama.fit(X_egitim, y_egitim)


en_iyi_parametreler = grid_arama.best_params_
en_iyi_skor = grid_arama.best_score_

print(f"En İyi Hiperparametreler: {en_iyi_parametreler}")
print(f"En İyi Çapraz Doğrulama Skoru: {en_iyi_skor:.2f}")

from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score
import pandas as pd
import matplotlib.pyplot as plt

en_iyi_knn_model = KNeighborsClassifier(
    n_neighbors=9,
    weights='distance',
    metric='euclidean'
)


en_iyi_knn_model.fit(X_egitim, y_egitim)


tahmin_y_egitim = en_iyi_knn_model.predict(X_egitim)
tahmin_y_test = en_iyi_knn_model.predict(X_test)


optimize_hassasiyet_egitim = precision_score(y_egitim, tahmin_y_egitim)
optimize_duyarlilik_egitim = recall_score(y_egitim, tahmin_y_egitim)
optimize_f1_egitim = f1_score(y_egitim, tahmin_y_egitim)
optimize_roc_auc_egitim = roc_auc_score(y_egitim, en_iyi_knn_model.predict_proba(X_egitim)[:, 1])
optimize_acc_egitim = accuracy_score(y_egitim, tahmin_y_egitim)

optimize_hassasiyet_test = precision_score(y_test, tahmin_y_test)
optimize_duyarlilik_test = recall_score(y_test, tahmin_y_test)
optimize_f1_test = f1_score(y_test, tahmin_y_test)
optimize_roc_auc_test = roc_auc_score(y_test, en_iyi_knn_model.predict_proba(X_test)[:, 1])
optimize_acc_test = accuracy_score(y_test, tahmin_y_test)

metrik_karsilastirma = pd.DataFrame({
    'Metrik': ['Doğruluk (Accuracy)', 'Hassasiyet (Precision)', 'Duyarlılık (Recall)', 'F1 Skoru', 'ROC AUC'],
    'Eğitim Verisi': [optimize_acc_egitim, optimize_hassasiyet_egitim, optimize_duyarlilik_egitim, optimize_f1_egitim, optimize_roc_auc_egitim],
    'Test Verisi': [optimize_acc_test, optimize_hassasiyet_test, optimize_duyarlilik_test, optimize_f1_test, optimize_roc_auc_test]
})

metrik_karsilastirma.set_index('Metrik').plot(kind='bar', figsize=(10, 6), color=['lightgreen', 'coral'])
plt.title('Model Performans Metrikleri Karşılaştırması (Eğitim ve Test Verisi)')
plt.ylabel('Değer')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

metrik_karsilastirma

from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_auc_score
import pandas as pd
import matplotlib.pyplot as plt

tahmin_y_test = en_iyi_knn_model.predict(X_test)

test_dogruluk = accuracy_score(y_test, tahmin_y_test)
test_f1 = f1_score(y_test, tahmin_y_test)
test_hassasiyet = precision_score(y_test, tahmin_y_test)
test_duyarlilik = recall_score(y_test, tahmin_y_test)
test_auc = roc_auc_score(y_test, en_iyi_knn_model.predict_proba(X_test)[:, 1])

test_performans = pd.DataFrame({
    'Metrik': ['Doğruluk (Accuracy)', 'F1 Skoru', 'Hassasiyet (Precision)', 'Duyarlılık (Recall)', 'ROC AUC'],
    'Test Verisi Performansı': [
        test_dogruluk,
        test_f1,
        test_hassasiyet,
        test_duyarlilik,
        test_auc
    ]
})

test_performans.set_index('Metrik').plot(kind='bar', figsize=(12, 8), legend=False, color='mediumseagreen')
plt.title('Modelin Test Veri Kümesi Üzerindeki Performansı')
plt.ylabel('Değer')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()


test_performans

